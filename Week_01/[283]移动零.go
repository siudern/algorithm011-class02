package Week_01

// 给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。
//
// 示例:
//  输入: [0,1,0,3,12]
//  输出: [1,3,12,0,0]
// 说明:
//  必须在原数组上操作，不能拷贝额外的数组。
//  尽量减少操作次数。

//来源：力扣（LeetCode）
//链接：https://leetcode-cn.com/problems/move-zeroes

//时间复杂度O(n)
//空间复杂度O(1)

// 核心思想，快慢指针
func moveZeroes(nums []int) {
	// j 为慢指针，总是记录num[j]为0的情况，用来和num[i]不为0的数字交换
	j := 0
	for i := 0; i < len(nums); i++ {
		if nums[i] != 0 {
			// i > j 的妙用，必须要保证两个指针一快一慢才能实现数组局部交换的高效性
			// 如果num[0] != 0，且此时i和j都是0，阻止了 非0, 非0 = 非0, 非0 的废操作
			if i > j {
				nums[j], nums[i] = nums[i], 0
			}
			// 直到找到下一个num[j]为0的情况
			j++
		}
	}
}
