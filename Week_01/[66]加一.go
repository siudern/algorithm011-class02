package Week_01


//给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。
//
//最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。
//
//你可以假设除了整数 0 之外，这个整数不会以零开头。
//
//示例 1:
//
//输入: [1,2,3]
//输出: [1,2,4]
//解释: 输入数组表示数字 123。
//示例 2:
//
//输入: [4,3,2,1]
//输出: [4,3,2,2]
//解释: 输入数组表示数字 4321。
//
//来源：力扣（LeetCode）
//链接：https://leetcode-cn.com/problems/plus-one

/*
解题思路
两种情况
    1、整数加1不进位
    2、整数加1进位
    则：
    思路：
    加1后，如果有进位则可以被10整除，余数为0，如果不进位，余数则为本身
    进位情况，利用当加1之后除以10等1的特性，可以将该值缓存，到最后，判断是否为0，如果为0则代表中间停止进位
    反之，则一直有进位情况
    最后判断缓存值如果为1，则返回以1开头的切片+原切片，否则返回原切片
    从最后往前循环整个切片

*/

func plusOne(digits []int) []int {
	a := 1
	for i := len(digits) - 1; i >= 0; i-- {
		digits[i], a = (digits[i] + a) % 10, (digits[i] + a) / 10
	}
	if a != 0 {
		return append([]int{a}, digits...)
	}
	return digits
}